// Authentication state
let currentUser = JSON.parse(localStorage.getItem('currentUser') || 'null');
const AUTH_API_URL = `${API_BASE_URL}/auth`;

// Event listeners for auth forms
document.addEventListener('DOMContentLoaded', () => {
    setupAuthListeners();
    updateAuthUI();
});

function setupAuthListeners() {
    const loginForm = document.getElementById('login-form');
    const registerForm = document.getElementById('register-form');
    
    if (loginForm) {
        loginForm.addEventListener('submit', handleLogin);
    }
    if (registerForm) {
        registerForm.addEventListener('submit', handleRegister);
    }
}

// Handle login
async function handleLogin(e) {
    e.preventDefault();
    const email = document.getElementById('login-email').value;
    const password = document.getElementById('login-password').value;

    try {
        const response = await fetch(`${AUTH_API_URL}/login`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ email, password }),
        });

        const data = await response.json();
        if (response.ok) {
            currentUser = data.user;
            localStorage.setItem('currentUser', JSON.stringify(currentUser));
            localStorage.setItem('authToken', data.token);
            updateAuthUI();
            showNotification('Successfully logged in!', 'success');
            closeAuthModal();
        } else {
            showNotification(data.message || 'Login failed', 'error');
        }
    } catch (error) {
        showNotification('Login failed. Please try again.', 'error');
    }
}

// Handle registration
async function handleRegister(e) {
    e.preventDefault();
    const email = document.getElementById('register-email').value;
    const password = document.getElementById('register-password').value;
    const confirmPassword = document.getElementById('register-confirm-password').value;

    if (password !== confirmPassword) {
        showNotification('Passwords do not match', 'error');
        return;
    }

    try {
        const response = await fetch(`${AUTH_API_URL}/register`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ email, password }),
        });

        const data = await response.json();
        if (response.ok) {
            showNotification('Registration successful! Please log in.', 'success');
            switchAuthMode('login');
        } else {
            showNotification(data.message || 'Registration failed', 'error');
        }
    } catch (error) {
        showNotification('Registration failed. Please try again.', 'error');
    }
}

// Handle logout
function handleLogout() {
    currentUser = null;
    localStorage.removeItem('currentUser');
    localStorage.removeItem('authToken');
    updateAuthUI();
    showNotification('Successfully logged out!', 'success');
}

// Update UI based on auth state
function updateAuthUI() {
    const authButton = document.getElementById('auth-button');
    const userMenu = document.getElementById('user-menu');
    const profileSection = document.getElementById('profile-section');

    if (currentUser) {
        authButton.classList.add('hidden');
        userMenu.classList.remove('hidden');
        if (profileSection) {
            profileSection.innerHTML = createProfileHTML(currentUser);
        }
    } else {
        authButton.classList.remove('hidden');
        userMenu.classList.add('hidden');
        if (profileSection) {
            profileSection.innerHTML = '';
        }
    }
}

// Create profile HTML
function createProfileHTML(user) {
    return `
        <div class="bg-white rounded-lg shadow p-6">
            <div class="flex items-center space-x-4 mb-6">
                <div class="w-16 h-16 bg-blue-500 rounded-full flex items-center justify-center">
                    <span class="text-2xl text-white font-bold">${user.email[0].toUpperCase()}</span>
                </div>
                <div>
                    <h2 class="text-xl font-bold text-gray-900">${user.email}</h2>
                    <p class="text-gray-600">Member since ${new Date(user.createdAt).toLocaleDateString()}</p>
                </div>
            </div>
            <div class="space-y-4">
                <div class="flex justify-between items-center">
                    <span class="text-gray-600">Favorite Apps</span>
                    <span class="text-blue-500 font-semibold">${favorites.length}</span>
                </div>
                <div class="flex justify-between items-center">
                    <span class="text-gray-600">Price Alerts</span>
                    <span class="text-blue-500 font-semibold">${user.priceAlerts?.length || 0}</span>
                </div>
            </div>
        </div>
    `;
}

// Show notification
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `fixed bottom-4 right-4 p-4 rounded-lg shadow-lg text-white ${
        type === 'success' ? 'bg-green-500' : type === 'error' ? 'bg-red-500' : 'bg-blue-500'
    }`;
    notification.textContent = message;
    document.body.appendChild(notification);
    setTimeout(() => notification.remove(), 3000);
}

// Export functions
export {
    handleLogin,
    handleRegister,
    handleLogout,
    currentUser,
    updateAuthUI,
    showNotification,
}; 