// API endpoints
const API_BASE_URL = 'https://api.aiappstracker.com'; // Replace with your actual API URL

// DOM Elements
const searchInput = document.getElementById('search-input');
const trendingAppsContainer = document.getElementById('trending-apps');
const categoriesContainer = document.getElementById('categories');
const appDetailsModal = document.getElementById('app-details-modal');
const modalContent = document.getElementById('modal-content');

// State
let favorites = JSON.parse(localStorage.getItem('favorites') || '[]');

// Import new features
import { userPreferences, updatePreference, applyPreferences, createPreferencesUI } from './scripts/userPreferences.js';
import { fetchComments, createCommentSection, createRatingSection, handleCommentSubmit, handleRatingSubmit } from './scripts/social.js';
import { createPriceHistorySection, initPriceHistory, createPriceAlertForm } from './scripts/priceHistory.js';
import { startRealTimeUpdates, stopRealTimeUpdates } from './scripts/realTimeUpdates.js';
import {
    CATEGORIES,
    SORT_OPTIONS,
    filterAppsByCategory,
    sortApps,
    groupAppsByMainCategory,
    createEnhancedCategorySection,
    createSortingControls
} from './scripts/categorization.js';

// Import real-time updates
import { startRealTimeUpdates, stopRealTimeUpdates } from './scripts/realTimeUpdates.js';

// Import advanced data gathering
import {
    RealTimeAggregator,
    createRealTimeUpdatesSection,
    ADVANCED_SOURCES,
    PROCESSING_RULES
} from './scripts/advancedDataGathering.js';

// Initialize real-time aggregator
const realTimeAggregator = new RealTimeAggregator();

// Fetch data from API
async function fetchData(endpoint) {
    try {
        const response = await fetch(`${API_BASE_URL}${endpoint}`);
        return await response.json();
    } catch (error) {
        console.error('Error fetching data:', error);
        return [];
    }
}

// Create app card HTML
function createAppCard(app) {
    const isFavorited = favorites.includes(app.id);
    return `
        <div class="app-card bg-white rounded-lg shadow-sm p-4" 
             data-price="${app.pricing?.[0]?.price || 0}"
             data-category="${app.category.name}"
             data-features='${JSON.stringify(app.features || [])}'>
            <div class="app-logo-container mb-4">
                ${app.logoUrl 
                    ? `<img src="${app.logoUrl}" alt="${app.name} logo" class="rounded-lg">`
                    : `<div class="w-full h-full bg-blue-500 rounded-lg flex items-center justify-center">
                        <span class="text-white text-3xl font-bold">${app.name.charAt(0)}</span>
                       </div>`
                }
            </div>
            <h3 class="text-lg font-semibold text-gray-900 mb-1">${app.name}</h3>
            <p class="text-sm text-gray-600 mb-2">
                ${app.company}
                ${app.source ? `<span class="ml-2 text-xs text-blue-500">${app.source}</span>` : ''}
            </p>
            <p class="text-sm text-gray-700 mb-4 line-clamp-2">${app.description}</p>
            <div class="flex items-center justify-between">
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                    ${app.category.name}
                </span>
                <button onclick="toggleFavorite('${app.id}')" class="text-gray-400 hover:text-red-500">
                    <i class="fas fa-heart ${isFavorited ? 'text-red-500' : ''}"></i>
                </button>
            </div>
            <button onclick="showAppDetails(${JSON.stringify(app)})" class="mt-4 w-full bg-blue-500 text-white py-2 rounded-md hover:bg-blue-600 transition-colors">
                View Details
            </button>
        </div>
    `;
}

// Create category card HTML
function createCategoryCard(category) {
    return `
        <div class="category-card bg-white rounded-lg shadow-sm p-4 cursor-pointer" onclick="showCategoryApps('${category.id}')">
            <i class="fas fa-${getCategoryIcon(category.name)} text-2xl text-blue-500 mb-2"></i>
            <h3 class="font-semibold text-gray-900">${category.name}</h3>
            <p class="text-sm text-gray-600">${category.count} apps</p>
        </div>
    `;
}

// Get category icon
function getCategoryIcon(categoryName) {
    const icons = {
        'Text Generation': 'text',
        'Image Generation': 'image',
        'Voice & Speech': 'microphone',
        'Data Analysis': 'chart-bar',
        'Code Generation': 'code',
        'Video Generation': 'video',
    };
    return icons[categoryName] || 'robot';
}

// Show app details modal
function showAppDetails(app) {
    const modalHTML = `
        <div class="modal-enter">
            <div class="flex justify-between items-start mb-6">
                <div class="flex items-center">
                    ${app.logoUrl 
                        ? `<img src="${app.logoUrl}" alt="${app.name} logo" class="w-16 h-16 rounded-lg mr-4">`
                        : `<div class="w-16 h-16 bg-blue-500 rounded-lg flex items-center justify-center mr-4">
                            <span class="text-white text-2xl font-bold">${app.name.charAt(0)}</span>
                           </div>`
                    }
                    <div>
                        <h2 class="text-2xl font-bold text-gray-900">${app.name}</h2>
                        <p class="text-gray-600">${app.company}</p>
                    </div>
                </div>
                <button onclick="closeModal()" class="text-gray-400 hover:text-gray-500">
                    <i class="fas fa-times text-xl"></i>
                </button>
            </div>
            
            <div class="mb-6">
                <h3 class="text-lg font-semibold mb-2">About</h3>
                <p class="text-gray-700">${app.description}</p>
            </div>

            <!-- Rating Section -->
            ${createRatingSection(app.id, app.rating)}

            <!-- Price History Section -->
            ${createPriceHistorySection(app.id)}

            <!-- Price Alert Form -->
            ${createPriceAlertForm(app.id, app.pricing[0].price)}

            <div class="mb-6">
                <h3 class="text-lg font-semibold mb-2">Features</h3>
                <ul class="feature-list">
                    ${app.features.map(feature => `
                        <li>
                            <i class="fas fa-check-circle"></i>
                            <span>${feature}</span>
                        </li>
                    `).join('')}
                </ul>
            </div>

            <div class="mb-6">
                <h3 class="text-lg font-semibold mb-2">Pricing</h3>
                <div class="space-y-2">
                    ${app.pricing.map(price => `
                        <div class="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                            <span class="font-medium">${price.plan}</span>
                            <span class="price-tag">
                                ${price.currency}${price.price}/${price.interval}
                            </span>
                        </div>
                    `).join('')}
                </div>
            </div>

            <div class="flex space-x-4 mb-6">
                <a href="${app.url}" target="_blank" class="flex-1 bg-blue-500 text-white py-2 px-4 rounded-md text-center hover:bg-blue-600 transition-colors">
                    Visit Website
                </a>
                <button onclick="shareApp(${JSON.stringify(app)})" class="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50">
                    <i class="fas fa-share-alt"></i>
                </button>
            </div>

            <!-- Comments Section -->
            ${createCommentSection(app.id)}
        </div>
    `;
    
    modalContent.innerHTML = modalHTML;
    appDetailsModal.classList.remove('hidden');

    // Initialize price history chart
    initPriceHistory(app.id);

    // Load comments
    fetchComments(app.id);
}

// Close modal
function closeModal() {
    appDetailsModal.classList.add('hidden');
}

// Toggle favorite
function toggleFavorite(appId) {
    const index = favorites.indexOf(appId);
    if (index === -1) {
        favorites.push(appId);
    } else {
        favorites.splice(index, 1);
    }
    localStorage.setItem('favorites', JSON.stringify(favorites));
    loadTrendingApps(); // Refresh the UI
}

// Share app
async function shareApp(app) {
    try {
        await navigator.share({
            title: app.name,
            text: `Check out ${app.name} - ${app.description}`,
            url: app.url
        });
    } catch (error) {
        console.log('Error sharing:', error);
    }
}

// Load trending apps
async function loadTrendingApps() {
    const apps = await fetchData('/apps/trending');
    const sortedApps = sortApps(apps, userPreferences.display.sortBy);
    const groupedApps = groupAppsByMainCategory(sortedApps);
    
    // Clear container
    trendingAppsContainer.innerHTML = '';
    
    // Add real-time updates section
    trendingAppsContainer.insertAdjacentHTML('beforebegin', createRealTimeUpdatesSection(realTimeAggregator.data));
    
    // Add sorting controls
    trendingAppsContainer.insertAdjacentHTML('beforebegin', createSortingControls());
    
    // Add category sections
    Object.entries(groupedApps).forEach(([category, categoryData]) => {
        if (categoryData.apps.length > 0) {
            trendingAppsContainer.insertAdjacentHTML('beforeend', 
                createEnhancedCategorySection(category, categoryData)
            );
        }
    });

    // Set up real-time update handlers
    setupRealTimeHandlers();
}

// Set up real-time update handlers
function setupRealTimeHandlers() {
    const updateCategory = document.getElementById('update-category');
    const refreshUpdates = document.getElementById('refresh-updates');
    const realTimeGrid = document.getElementById('real-time-grid');

    // Handle category changes
    updateCategory.addEventListener('change', () => {
        const category = updateCategory.value;
        const items = category === 'all' ? 
            realTimeAggregator.getTrendingItems() : 
            realTimeAggregator.getTrendingItems(category);
        
        realTimeGrid.innerHTML = items.map(item => createUpdateCard(item)).join('');
    });

    // Handle manual refresh
    refreshUpdates.addEventListener('click', async () => {
        refreshUpdates.classList.add('animate-spin');
        await realTimeAggregator.gatherData();
        refreshUpdates.classList.remove('animate-spin');
    });

    // Add real-time update listener
    realTimeAggregator.addListener((data) => {
        const category = updateCategory.value;
        const items = category === 'all' ? 
            realTimeAggregator.getTrendingItems() : 
            realTimeAggregator.getTrendingItems(category);
        
        // Animate new items
        const oldItems = new Set(Array.from(realTimeGrid.children).map(el => el.dataset.id));
        
        realTimeGrid.innerHTML = items.map(item => createUpdateCard(item)).join('');
        
        Array.from(realTimeGrid.children).forEach(el => {
            if (!oldItems.has(el.dataset.id)) {
                el.classList.add('new-update');
                setTimeout(() => el.classList.remove('new-update'), 3000);
            }
        });
    });
}

// Add styles for real-time updates
const style = document.createElement('style');
style.textContent = `
    @keyframes slideIn {
        from {
            opacity: 0;
            transform: translateY(-20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .new-update {
        animation: slideIn 0.5s ease-out;
    }

    @keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }

    .animate-spin {
        animation: spin 1s linear infinite;
    }

    .update-card {
        transition: all 0.3s ease;
    }

    .update-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    }
`;
document.head.appendChild(style);

// Load categories
async function loadCategories() {
    const categories = await fetchData('/categories');
    categoriesContainer.innerHTML = categories.map(createCategoryCard).join('');
}

// Search functionality
let searchTimeout;
searchInput.addEventListener('input', (e) => {
    clearTimeout(searchTimeout);
    searchTimeout = setTimeout(async () => {
        const query = e.target.value.toLowerCase();
        
        if (query.length >= 2) {
            const results = await fetchData('/apps/all');
            const filteredApps = results.filter(app => 
                app.name.toLowerCase().includes(query) ||
                app.description.toLowerCase().includes(query) ||
                app.category.name.toLowerCase().includes(query)
            );
            
            const grouped = groupAppsByMainCategory(filteredApps);
            trendingAppsContainer.innerHTML = '';
            
            Object.entries(grouped).forEach(([category, categoryData]) => {
                if (categoryData.apps.length > 0) {
                    trendingAppsContainer.insertAdjacentHTML('beforeend',
                        createEnhancedCategorySection(category, categoryData)
                    );
                }
            });
        } else if (query.length === 0) {
            loadTrendingApps();
        }
    }, 300);
});

// Close modal when clicking outside
appDetailsModal.addEventListener('click', (e) => {
    if (e.target === appDetailsModal) {
        closeModal();
    }
});

// Add preferences button to header
document.querySelector('nav').insertAdjacentHTML('beforeend', `
    <button id="preferences-button" class="ml-4 text-gray-600 hover:text-gray-900">
        <i class="fas fa-cog"></i>
    </button>
`);

// Show preferences modal
function showPreferencesModal() {
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
    modal.innerHTML = `
        <div class="bg-white rounded-lg shadow-xl max-w-lg w-full mx-4">
            <div class="p-6">
                ${createPreferencesUI()}
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            modal.remove();
        }
    });
}

// Add event listener for preferences button
document.getElementById('preferences-button').addEventListener('click', showPreferencesModal);

// Add update indicator to header
document.querySelector('nav').insertAdjacentHTML('beforeend', `
    <div class="flex items-center ml-4">
        <span id="update-status" class="text-sm text-gray-600 mr-2">Updates: Active</span>
        <button id="toggle-updates" class="text-gray-600 hover:text-gray-900">
            <i class="fas fa-sync-alt"></i>
        </button>
    </div>
`);

// Toggle updates functionality
let updatesActive = true;
const updateStatus = document.getElementById('update-status');
const toggleUpdatesBtn = document.getElementById('toggle-updates');

function toggleUpdates() {
    updatesActive = !updatesActive;
    updateStatus.textContent = `Updates: ${updatesActive ? 'Active' : 'Paused'}`;
    toggleUpdatesBtn.classList.toggle('text-blue-500', updatesActive);
    
    if (updatesActive) {
        startRealTimeUpdates();
        showNotification('Real-time updates activated', 'success');
    } else {
        stopRealTimeUpdates();
        showNotification('Real-time updates paused', 'info');
    }
}

toggleUpdatesBtn.addEventListener('click', toggleUpdates);

// Update initialization
document.addEventListener('DOMContentLoaded', async () => {
    // Start real-time data gathering
    await realTimeAggregator.gatherData();
    
    // Initialize the rest
    allApps = await fetchData('/apps/all');
    loadTrendingApps();
    loadCategories();
    applyPreferences();
    
    // Set up periodic updates (every 5 hours)
    setInterval(() => realTimeAggregator.gatherData(), 5 * 60 * 60 * 1000);
});

// Export functions for other modules
export {
    showNotification
};

// Add category interaction functions
window.toggleCategoryExpand = function(category) {
    const content = document.getElementById(`${category}-content`);
    const chevron = document.getElementById(`${category}-chevron`);
    
    content.classList.toggle('collapsed');
    chevron.classList.toggle('fa-chevron-down');
    chevron.classList.toggle('fa-chevron-up');
};

window.filterSubcategory = function(category, subcategory) {
    const categoryContent = document.getElementById(`${category}-content`);
    const tabs = categoryContent.querySelectorAll('.subcategory-tab');
    const appsContainer = document.getElementById(`${category}-apps`);
    
    // Update active tab
    tabs.forEach(tab => {
        tab.classList.toggle('active', 
            (subcategory === null && tab.textContent.trim() === 'All') ||
            (tab.textContent.trim() === subcategory)
        );
    });
    
    // Filter apps
    const apps = groupAppsByMainCategory(allApps)[category].apps;
    const filteredApps = subcategory ? 
        apps.filter(app => app.category.name === subcategory) : 
        apps;
    
    // Update display
    appsContainer.innerHTML = filteredApps.map(app => createAppCard(app)).join('');
};

window.handleSortChange = function(sortBy) {
    userPreferences.display.sortBy = sortBy;
    updatePreference('display', 'sortBy', sortBy);
    loadTrendingApps();
};

window.toggleView = function(viewMode) {
    const gridBtn = document.getElementById('grid-view-btn');
    const listBtn = document.getElementById('list-view-btn');
    const appContainers = document.querySelectorAll('[id$="-apps"]');
    
    // Update buttons
    gridBtn.classList.toggle('active', viewMode === 'grid');
    listBtn.classList.toggle('active', viewMode === 'list');
    
    // Update layout
    appContainers.forEach(container => {
        if (viewMode === 'grid') {
            container.className = 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6';
        } else {
            container.className = 'space-y-4';
        }
    });
    
    // Update preference
    updatePreference('display', 'viewMode', viewMode);
};

// Store all apps for filtering
let allApps = []; 