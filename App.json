// Mock data for testing - replace with actual API endpoints later
const mockData = {
    trendingApps: [
        {
            id: 1,
            name: "ChatGPT",
            description: "Advanced language model for conversation and text generation",
            category: "Language Models",
            icon: "fas fa-robot",
            rating: 4.8
        },
        {
            id: 2,
            name: "DALL-E",
            description: "AI image generation from text descriptions",
            category: "Image Generation",
            icon: "fas fa-image",
            rating: 4.7
        },
        {
            id: 3,
            name: "Midjourney",
            description: "Create artistic images from textual descriptions",
            category: "Image Generation",
            icon: "fas fa-palette",
            rating: 4.9
        }
    ],
    categories: [
        { id: 1, name: "Language Models", icon: "fas fa-language" },
        { id: 2, name: "Image Generation", icon: "fas fa-image" },
        { id: 3, name: "Audio Processing", icon: "fas fa-music" },
        { id: 4, name: "Video Generation", icon: "fas fa-video" },
        { id: 5, name: "Code Generation", icon: "fas fa-code" },
        { id: 6, name: "Data Analysis", icon: "fas fa-chart-bar" }
    ]
};

// DOM Elements
let trendingAppsContainer;
let categoriesContainer;
let searchInput;
let modal;
let modalContent;
let errorMessage;

// Initialize the application
function initializeApp() {
    try {
        // Get DOM elements
        trendingAppsContainer = document.getElementById('trending-apps');
        categoriesContainer = document.getElementById('categories');
        searchInput = document.getElementById('search-input');
        modal = document.getElementById('app-details-modal');
        modalContent = document.getElementById('modal-content');
        errorMessage = document.getElementById('error-message');

        if (!trendingAppsContainer || !categoriesContainer || !searchInput || !modal || !modalContent) {
            throw new Error('Required DOM elements not found');
        }

        // Set up event listeners
        searchInput.addEventListener('input', (e) => filterApps(e.target.value));
        modal.addEventListener('click', (e) => {
            if (e.target === modal) closeModal();
        });

        // Initial render
        updateTrendingApps();
        updateCategories();

    } catch (error) {
        showError('Failed to initialize application: ' + error.message);
    }
}

// Function to create a trending app card
function createAppCard(app) {
    try {
        const card = document.createElement('div');
        card.className = 'bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition duration-300 card-hover cursor-pointer';
        card.innerHTML = `
            <div class="flex items-center mb-4">
                <i class="${app.icon} text-2xl text-blue-500"></i>
                <h3 class="ml-3 text-xl font-semibold text-gray-900">${app.name}</h3>
            </div>
            <p class="text-gray-600 mb-4">${app.description}</p>
            <div class="flex justify-between items-center">
                <span class="text-sm text-gray-500">${app.category}</span>
                <div class="flex items-center">
                    <i class="fas fa-star text-yellow-400 mr-1"></i>
                    <span class="text-sm font-medium text-gray-700">${app.rating}</span>
                </div>
            </div>
        `;
        card.addEventListener('click', () => showAppDetails(app));
        return card;
    } catch (error) {
        showError('Error creating app card');
        return null;
    }
}

// Function to create a category card
function createCategoryCard(category) {
    try {
        const card = document.createElement('div');
        card.className = 'bg-white rounded-lg shadow-sm p-4 hover:bg-gray-50 cursor-pointer transition duration-300 card-hover';
        card.innerHTML = `
            <div class="flex items-center">
                <i class="${category.icon} text-xl text-blue-500"></i>
                <span class="ml-3 font-medium text-gray-900">${category.name}</span>
            </div>
        `;
        return card;
    } catch (error) {
        showError('Error creating category card');
        return null;
    }
}

// Function to show app details in modal
function showAppDetails(app) {
    try {
        modalContent.innerHTML = `
            <div class="flex justify-between items-start mb-6">
                <div class="flex items-center">
                    <i class="${app.icon} text-3xl text-blue-500"></i>
                    <h2 class="ml-4 text-2xl font-bold text-gray-900">${app.name}</h2>
                </div>
                <button onclick="closeModal()" class="text-gray-400 hover:text-gray-500">
                    <i class="fas fa-times text-xl"></i>
                </button>
            </div>
            <div class="space-y-4">
                <p class="text-gray-600">${app.description}</p>
                <div class="flex items-center">
                    <span class="text-sm font-medium text-gray-500">Category:</span>
                    <span class="ml-2 text-sm text-gray-900">${app.category}</span>
                </div>
                <div class="flex items-center">
                    <span class="text-sm font-medium text-gray-500">Rating:</span>
                    <div class="ml-2 flex items-center">
                        <i class="fas fa-star text-yellow-400 mr-1"></i>
                        <span class="text-sm text-gray-900">${app.rating}</span>
                    </div>
                </div>
            </div>
        `;
        modal.classList.remove('hidden');
    } catch (error) {
        showError('Error showing app details');
    }
}

// Function to close modal
function closeModal() {
    modal.classList.add('hidden');
}

// Function to filter apps based on search input
function filterApps(searchTerm) {
    try {
        const filteredApps = mockData.trendingApps.filter(app => 
            app.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
            app.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
            app.category.toLowerCase().includes(searchTerm.toLowerCase())
        );
        updateTrendingApps(filteredApps);
    } catch (error) {
        showError('Error filtering apps');
    }
}

// Function to update trending apps display
function updateTrendingApps(apps = mockData.trendingApps) {
    try {
        trendingAppsContainer.innerHTML = '';
        apps.forEach(app => {
            const card = createAppCard(app);
            if (card) trendingAppsContainer.appendChild(card);
        });
    } catch (error) {
        showError('Error updating trending apps');
    }
}

// Function to update categories display
function updateCategories() {
    try {
        categoriesContainer.innerHTML = '';
        mockData.categories.forEach(category => {
            const card = createCategoryCard(category);
            if (card) categoriesContainer.appendChild(card);
        });
    } catch (error) {
        showError('Error updating categories');
    }
}

// Function to show error message
function showError(message) {
    console.error(message);
    if (errorMessage) {
        errorMessage.querySelector('p').textContent = message;
        errorMessage.classList.remove('hidden');
        setTimeout(() => {
            errorMessage.classList.add('hidden');
        }, 5000);
    }
}

// Make closeModal available globally
window.closeModal = closeModal;

// Initialize the app when the DOM is loaded
document.addEventListener('DOMContentLoaded', initializeApp);
