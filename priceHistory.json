// Price History Management
import { showNotification } from '../app.js';

// Load Chart.js from CDN
function loadChartJS() {
    return new Promise((resolve, reject) => {
        if (window.Chart) {
            resolve(window.Chart);
            return;
        }

        const script = document.createElement('script');
        script.src = 'https://cdn.jsdelivr.net/npm/chart.js';
        script.onload = () => resolve(window.Chart);
        script.onerror = reject;
        document.head.appendChild(script);
    });
}

// Fetch price history for an app
async function fetchPriceHistory(appId) {
    try {
        const response = await fetch(`${API_BASE_URL}/apps/${appId}/price-history`);
        const data = await response.json();
        return data;
    } catch (error) {
        console.error('Error fetching price history:', error);
        return [];
    }
}

// Create price history chart
async function createPriceHistoryChart(appId, containerId) {
    try {
        await loadChartJS();
        const priceHistory = await fetchPriceHistory(appId);
        
        const dates = priceHistory.map(entry => new Date(entry.timestamp).toLocaleDateString());
        const prices = priceHistory.map(entry => entry.price);

        const ctx = document.getElementById(containerId).getContext('2d');
        new Chart(ctx, {
            type: 'line',
            data: {
                labels: dates,
                datasets: [{
                    label: 'Price History',
                    data: prices,
                    borderColor: 'rgb(59, 130, 246)',
                    backgroundColor: 'rgba(59, 130, 246, 0.1)',
                    borderWidth: 2,
                    fill: true,
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        mode: 'index',
                        intersect: false,
                        callbacks: {
                            label: function(context) {
                                return `Price: $${context.parsed.y.toFixed(2)}`;
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        grid: {
                            display: false
                        }
                    },
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) {
                                return '$' + value;
                            }
                        }
                    }
                }
            }
        });
    } catch (error) {
        console.error('Error creating price history chart:', error);
        showNotification('Failed to load price history chart', 'error');
    }
}

// Create price history section HTML
function createPriceHistorySection(appId) {
    return `
        <div class="price-history-section mt-6">
            <h3 class="text-lg font-semibold mb-4">Price History</h3>
            <div class="bg-white rounded-lg shadow p-4">
                <div class="h-64">
                    <canvas id="price-history-chart-${appId}"></canvas>
                </div>
            </div>
        </div>
    `;
}

// Initialize price history
function initPriceHistory(appId) {
    const container = document.getElementById(`price-history-chart-${appId}`);
    if (container) {
        createPriceHistoryChart(appId, `price-history-chart-${appId}`);
    }
}

// Set up price alert
async function setPriceAlert(appId, targetPrice) {
    try {
        const response = await fetch(`${API_BASE_URL}/apps/${appId}/price-alerts`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('authToken')}`
            },
            body: JSON.stringify({
                targetPrice,
                userId: currentUser.id
            })
        });

        const data = await response.json();
        if (response.ok) {
            showNotification('Price alert set successfully', 'success');
            return data;
        } else {
            throw new Error(data.message);
        }
    } catch (error) {
        showNotification('Failed to set price alert', 'error');
        return null;
    }
}

// Create price alert form HTML
function createPriceAlertForm(appId, currentPrice) {
    return `
        <div class="price-alert-form mt-4">
            <h4 class="font-medium mb-2">Set Price Alert</h4>
            <div class="flex space-x-2">
                <input type="number" 
                       id="price-alert-input-${appId}"
                       class="form-input flex-1"
                       min="0"
                       step="0.01"
                       value="${currentPrice}"
                       placeholder="Enter target price">
                <button onclick="handlePriceAlertSubmit('${appId}')"
                        class="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600">
                    Set Alert
                </button>
            </div>
        </div>
    `;
}

// Handle price alert submission
async function handlePriceAlertSubmit(appId) {
    const input = document.getElementById(`price-alert-input-${appId}`);
    const targetPrice = parseFloat(input.value);
    
    if (!isNaN(targetPrice) && targetPrice >= 0) {
        await setPriceAlert(appId, targetPrice);
    } else {
        showNotification('Please enter a valid price', 'error');
    }
}

// Export functions
export {
    createPriceHistoryChart,
    createPriceHistorySection,
    initPriceHistory,
    setPriceAlert,
    createPriceAlertForm,
    handlePriceAlertSubmit
}; 